/*
 * generated by Xtext 2.22.0
 */
grammar InternalXSS;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package tdt4250.xss.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package tdt4250.xss.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import tdt4250.xss.services.XSSGrammarAccess;

}
@parser::members {
	private XSSGrammarAccess grammarAccess;

	public void setGrammarAccess(XSSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleStylesheet
entryRuleStylesheet
:
{ before(grammarAccess.getStylesheetRule()); }
	 ruleStylesheet
{ after(grammarAccess.getStylesheetRule()); } 
	 EOF 
;

// Rule Stylesheet
ruleStylesheet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStylesheetAccess().getGroup()); }
		(rule__Stylesheet__Group__0)
		{ after(grammarAccess.getStylesheetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGroupSelector
entryRuleGroupSelector
:
{ before(grammarAccess.getGroupSelectorRule()); }
	 ruleGroupSelector
{ after(grammarAccess.getGroupSelectorRule()); } 
	 EOF 
;

// Rule GroupSelector
ruleGroupSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGroupSelectorAccess().getGroup()); }
		(rule__GroupSelector__Group__0)
		{ after(grammarAccess.getGroupSelectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelector
entryRuleSelector
:
{ before(grammarAccess.getSelectorRule()); }
	 ruleSelector
{ after(grammarAccess.getSelectorRule()); } 
	 EOF 
;

// Rule Selector
ruleSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getSelectorAccess().getNamesAssignment()); }
			(rule__Selector__NamesAssignment)
			{ after(grammarAccess.getSelectorAccess().getNamesAssignment()); }
		)
		(
			{ before(grammarAccess.getSelectorAccess().getNamesAssignment()); }
			(rule__Selector__NamesAssignment)*
			{ after(grammarAccess.getSelectorAccess().getNamesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__NamesAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getNamesSELTerminalRuleCall_0_0()); }
		RULE_SEL
		{ after(grammarAccess.getSelectorAccess().getNamesSELTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelectorAccess().getNamesSTRINGTerminalRuleCall_0_1()); }
		RULE_STRING
		{ after(grammarAccess.getSelectorAccess().getNamesSTRINGTerminalRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stylesheet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stylesheet__Group__0__Impl
	rule__Stylesheet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stylesheet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStylesheetAccess().getXSelectorsKeyword_0()); }
	'XSelectors:'
	{ after(grammarAccess.getStylesheetAccess().getXSelectorsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stylesheet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stylesheet__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stylesheet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getStylesheetAccess().getCustomSelectorsAssignment_1()); }
		(rule__Stylesheet__CustomSelectorsAssignment_1)
		{ after(grammarAccess.getStylesheetAccess().getCustomSelectorsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getStylesheetAccess().getCustomSelectorsAssignment_1()); }
		(rule__Stylesheet__CustomSelectorsAssignment_1)*
		{ after(grammarAccess.getStylesheetAccess().getCustomSelectorsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupSelector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupSelector__Group__0__Impl
	rule__GroupSelector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupSelectorAccess().getSelKeyword_0()); }
	'sel'
	{ after(grammarAccess.getGroupSelectorAccess().getSelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupSelector__Group__1__Impl
	rule__GroupSelector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupSelectorAccess().getNameAssignment_1()); }
	(rule__GroupSelector__NameAssignment_1)
	{ after(grammarAccess.getGroupSelectorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupSelector__Group__2__Impl
	rule__GroupSelector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupSelectorAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getGroupSelectorAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupSelector__Group__3__Impl
	rule__GroupSelector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupSelectorAccess().getSubSelectorsAssignment_3()); }
	(rule__GroupSelector__SubSelectorsAssignment_3)
	{ after(grammarAccess.getGroupSelectorAccess().getSubSelectorsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupSelector__Group__4__Impl
	rule__GroupSelector__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupSelectorAccess().getGroup_4()); }
	(rule__GroupSelector__Group_4__0)*
	{ after(grammarAccess.getGroupSelectorAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupSelector__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupSelectorAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getGroupSelectorAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupSelector__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupSelector__Group_4__0__Impl
	rule__GroupSelector__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupSelectorAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getGroupSelectorAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupSelector__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupSelectorAccess().getSubSelectorsAssignment_4_1()); }
	(rule__GroupSelector__SubSelectorsAssignment_4_1)
	{ after(grammarAccess.getGroupSelectorAccess().getSubSelectorsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stylesheet__CustomSelectorsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStylesheetAccess().getCustomSelectorsGroupSelectorParserRuleCall_1_0()); }
		ruleGroupSelector
		{ after(grammarAccess.getStylesheetAccess().getCustomSelectorsGroupSelectorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupSelectorAccess().getNameNAMETerminalRuleCall_1_0()); }
		RULE_NAME
		{ after(grammarAccess.getGroupSelectorAccess().getNameNAMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__SubSelectorsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupSelectorAccess().getSubSelectorsSelectorParserRuleCall_3_0()); }
		ruleSelector
		{ after(grammarAccess.getGroupSelectorAccess().getSubSelectorsSelectorParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupSelector__SubSelectorsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupSelectorAccess().getSubSelectorsSelectorParserRuleCall_4_1_0()); }
		ruleSelector
		{ after(grammarAccess.getGroupSelectorAccess().getSubSelectorsSelectorParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__NamesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getNamesAlternatives_0()); }
		(rule__Selector__NamesAlternatives_0)
		{ after(grammarAccess.getSelectorAccess().getNamesAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NAME : (RULE_ID|'-')+;

RULE_SEL : ('::'|':'|'.'|'#')? RULE_NAME ((('>'|'+'|'~')|('::'|':'|'.'|'#')|('>'|'+'|'~') ('::'|':'|'.'|'#')) RULE_NAME)*;

fragment RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
