/*
 * generated by Xtext 2.22.0
 */
package tdt4250.xss.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import tdt4250.xss.services.XSSGrammarAccess;
import tdt4250.xss.xSS.GroupSelector;
import tdt4250.xss.xSS.Selector;
import tdt4250.xss.xSS.XSSPackage;
import tdt4250.xss.xSS.stylesheet;

@SuppressWarnings("all")
public class XSSSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XSSGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XSSPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XSSPackage.GROUP_SELECTOR:
				sequence_GroupSelector(context, (GroupSelector) semanticObject); 
				return; 
			case XSSPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case XSSPackage.STYLESHEET:
				sequence_Stylesheet(context, (stylesheet) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     GroupSelector returns GroupSelector
	 *
	 * Constraint:
	 *     (name=NAME subSelectors+=Selector subSelectors+=Selector*)
	 */
	protected void sequence_GroupSelector(ISerializationContext context, GroupSelector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     (names+=SEL | names+=STRING)+
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stylesheet returns stylesheet
	 *
	 * Constraint:
	 *     customSelectors+=GroupSelector+
	 */
	protected void sequence_Stylesheet(ISerializationContext context, stylesheet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
