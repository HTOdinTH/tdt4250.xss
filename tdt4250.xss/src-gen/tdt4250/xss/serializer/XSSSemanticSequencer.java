/*
 * generated by Xtext 2.22.0
 */
package tdt4250.xss.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import tdt4250.xss.services.XSSGrammarAccess;
import tdt4250.xss.xSS.CustomProperty;
import tdt4250.xss.xSS.Expression;
import tdt4250.xss.xSS.GroupProperty;
import tdt4250.xss.xSS.GroupSelector;
import tdt4250.xss.xSS.MultiRefStatement;
import tdt4250.xss.xSS.MultiStatement;
import tdt4250.xss.xSS.Rule;
import tdt4250.xss.xSS.Selector;
import tdt4250.xss.xSS.SingleRefStatement;
import tdt4250.xss.xSS.SingleStatement;
import tdt4250.xss.xSS.State;
import tdt4250.xss.xSS.Stylesheet;
import tdt4250.xss.xSS.SubRule;
import tdt4250.xss.xSS.XSSPackage;

@SuppressWarnings("all")
public class XSSSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XSSGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XSSPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XSSPackage.CUSTOM_PROPERTY:
				sequence_CustomProperty(context, (CustomProperty) semanticObject); 
				return; 
			case XSSPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case XSSPackage.GROUP_PROPERTY:
				sequence_GroupProperty(context, (GroupProperty) semanticObject); 
				return; 
			case XSSPackage.GROUP_SELECTOR:
				sequence_GroupSelector(context, (GroupSelector) semanticObject); 
				return; 
			case XSSPackage.MULTI_REF_STATEMENT:
				sequence_MultiRefStatement(context, (MultiRefStatement) semanticObject); 
				return; 
			case XSSPackage.MULTI_STATEMENT:
				sequence_MultiStatement(context, (MultiStatement) semanticObject); 
				return; 
			case XSSPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case XSSPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case XSSPackage.SINGLE_REF_STATEMENT:
				sequence_SingleRefStatement(context, (SingleRefStatement) semanticObject); 
				return; 
			case XSSPackage.SINGLE_STATEMENT:
				sequence_SingleStatement(context, (SingleStatement) semanticObject); 
				return; 
			case XSSPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case XSSPackage.STYLESHEET:
				sequence_Stylesheet(context, (Stylesheet) semanticObject); 
				return; 
			case XSSPackage.SUB_RULE:
				sequence_SubRule(context, (SubRule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     XProperty returns CustomProperty
	 *     CustomProperty returns CustomProperty
	 *
	 * Constraint:
	 *     (name=NAME subRules+=SubRule+)
	 */
	protected void sequence_CustomProperty(ISerializationContext context, CustomProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     name=STRING_OR_VAL
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.EXPRESSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getNameSTRING_OR_VALParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XProperty returns GroupProperty
	 *     GroupProperty returns GroupProperty
	 *
	 * Constraint:
	 *     (name=NAME statements+=XStatement+)
	 */
	protected void sequence_GroupProperty(ISerializationContext context, GroupProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XSelector returns GroupSelector
	 *     GroupSelector returns GroupSelector
	 *
	 * Constraint:
	 *     (name=NAME subSelectors+=Selector subSelectors+=Selector*)
	 */
	protected void sequence_GroupSelector(ISerializationContext context, GroupSelector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XStatement returns MultiRefStatement
	 *     XMultiStatement returns MultiRefStatement
	 *     MultiRefStatement returns MultiRefStatement
	 *
	 * Constraint:
	 *     (property=[CustomProperty|NAME] states+=State+)
	 */
	protected void sequence_MultiRefStatement(ISerializationContext context, MultiRefStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XStatement returns MultiStatement
	 *     XMultiStatement returns MultiStatement
	 *     MultiStatement returns MultiStatement
	 *
	 * Constraint:
	 *     (property=PROPERTY states+=State+)
	 */
	protected void sequence_MultiStatement(ISerializationContext context, MultiStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (
	 *         (selectors+=Selector | groupSelectors+=[GroupSelector|NAME]) 
	 *         selectors+=Selector? 
	 *         (groupSelectors+=[GroupSelector|NAME]? selectors+=Selector?)* 
	 *         (xStatements+=XStatement | groupStatements+=[GroupProperty|NAME])+
	 *     )
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     name=STRING_OR_SEL
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.SELECTOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.SELECTOR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSelectorAccess().getNameSTRING_OR_SELParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XStatement returns SingleRefStatement
	 *     XSingleStatement returns SingleRefStatement
	 *     SingleRefStatement returns SingleRefStatement
	 *
	 * Constraint:
	 *     (property=[CustomProperty|NAME] value=VALUE)
	 */
	protected void sequence_SingleRefStatement(ISerializationContext context, SingleRefStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.SINGLE_REF_STATEMENT__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.SINGLE_REF_STATEMENT__PROPERTY));
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.XSINGLE_STATEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.XSINGLE_STATEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleRefStatementAccess().getPropertyCustomPropertyNAMETerminalRuleCall_0_0_1(), semanticObject.eGet(XSSPackage.Literals.SINGLE_REF_STATEMENT__PROPERTY, false));
		feeder.accept(grammarAccess.getSingleRefStatementAccess().getValueVALUEParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XStatement returns SingleStatement
	 *     XSingleStatement returns SingleStatement
	 *     SingleStatement returns SingleStatement
	 *
	 * Constraint:
	 *     (property=PROPERTY value=VALUE)
	 */
	protected void sequence_SingleStatement(ISerializationContext context, SingleStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.SINGLE_STATEMENT__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.SINGLE_STATEMENT__PROPERTY));
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.XSINGLE_STATEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.XSINGLE_STATEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleStatementAccess().getPropertyPROPERTYParserRuleCall_0_0(), semanticObject.getProperty());
		feeder.accept(grammarAccess.getSingleStatementAccess().getValueVALUEParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (modifier=Selector value=VALUE)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.STATE__MODIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.STATE__MODIFIER));
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.STATE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.STATE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateAccess().getModifierSelectorParserRuleCall_0_0(), semanticObject.getModifier());
		feeder.accept(grammarAccess.getStateAccess().getValueVALUEParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Stylesheet returns Stylesheet
	 *
	 * Constraint:
	 *     (customSelectors+=XSelector* customProperties+=XProperty* rules+=Rule+)
	 */
	protected void sequence_Stylesheet(ISerializationContext context, Stylesheet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubRule returns SubRule
	 *
	 * Constraint:
	 *     (property=PROPERTY expression=Expression)
	 */
	protected void sequence_SubRule(ISerializationContext context, SubRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.SUB_RULE__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.SUB_RULE__PROPERTY));
			if (transientValues.isValueTransient(semanticObject, XSSPackage.Literals.SUB_RULE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XSSPackage.Literals.SUB_RULE__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubRuleAccess().getPropertyPROPERTYParserRuleCall_0_0(), semanticObject.getProperty());
		feeder.accept(grammarAccess.getSubRuleAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
}
