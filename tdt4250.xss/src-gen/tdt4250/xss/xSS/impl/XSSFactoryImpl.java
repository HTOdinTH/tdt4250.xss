/**
 * generated by Xtext 2.22.0
 */
package tdt4250.xss.xSS.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import tdt4250.xss.xSS.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XSSFactoryImpl extends EFactoryImpl implements XSSFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static XSSFactory init()
  {
    try
    {
      XSSFactory theXSSFactory = (XSSFactory)EPackage.Registry.INSTANCE.getEFactory(XSSPackage.eNS_URI);
      if (theXSSFactory != null)
      {
        return theXSSFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new XSSFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XSSFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case XSSPackage.STYLESHEET: return createstylesheet();
      case XSSPackage.XSELECTOR: return createXSelector();
      case XSSPackage.GROUP_SELECTOR: return createGroupSelector();
      case XSSPackage.SELECTOR: return createSelector();
      case XSSPackage.XPROPERTY: return createXProperty();
      case XSSPackage.CUSTOM_PROPERTY: return createCustomProperty();
      case XSSPackage.SUB_RULE: return createSubRule();
      case XSSPackage.EXPRESSION: return createExpression();
      case XSSPackage.GROUP_PROPERTY: return createGroupProperty();
      case XSSPackage.XSTATEMENT: return createXStatement();
      case XSSPackage.XSINGLE_STATEMENT: return createXSingleStatement();
      case XSSPackage.SINGLE_REF_STATEMENT: return createSingleRefStatement();
      case XSSPackage.SINGLE_STATEMENT: return createSingleStatement();
      case XSSPackage.XMULTI_STATEMENT: return createXMultiStatement();
      case XSSPackage.MULTI_REF_STATEMENT: return createMultiRefStatement();
      case XSSPackage.MULTI_STATEMENT: return createMultiStatement();
      case XSSPackage.STATE: return createState();
      case XSSPackage.RULE: return createRule();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public stylesheet createstylesheet()
  {
    stylesheetImpl stylesheet = new stylesheetImpl();
    return stylesheet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSelector createXSelector()
  {
    XSelectorImpl xSelector = new XSelectorImpl();
    return xSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GroupSelector createGroupSelector()
  {
    GroupSelectorImpl groupSelector = new GroupSelectorImpl();
    return groupSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XProperty createXProperty()
  {
    XPropertyImpl xProperty = new XPropertyImpl();
    return xProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomProperty createCustomProperty()
  {
    CustomPropertyImpl customProperty = new CustomPropertyImpl();
    return customProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubRule createSubRule()
  {
    SubRuleImpl subRule = new SubRuleImpl();
    return subRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GroupProperty createGroupProperty()
  {
    GroupPropertyImpl groupProperty = new GroupPropertyImpl();
    return groupProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XStatement createXStatement()
  {
    XStatementImpl xStatement = new XStatementImpl();
    return xStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSingleStatement createXSingleStatement()
  {
    XSingleStatementImpl xSingleStatement = new XSingleStatementImpl();
    return xSingleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleRefStatement createSingleRefStatement()
  {
    SingleRefStatementImpl singleRefStatement = new SingleRefStatementImpl();
    return singleRefStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleStatement createSingleStatement()
  {
    SingleStatementImpl singleStatement = new SingleStatementImpl();
    return singleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XMultiStatement createXMultiStatement()
  {
    XMultiStatementImpl xMultiStatement = new XMultiStatementImpl();
    return xMultiStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiRefStatement createMultiRefStatement()
  {
    MultiRefStatementImpl multiRefStatement = new MultiRefStatementImpl();
    return multiRefStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiStatement createMultiStatement()
  {
    MultiStatementImpl multiStatement = new MultiStatementImpl();
    return multiStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSSPackage getXSSPackage()
  {
    return (XSSPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static XSSPackage getPackage()
  {
    return XSSPackage.eINSTANCE;
  }

} //XSSFactoryImpl
