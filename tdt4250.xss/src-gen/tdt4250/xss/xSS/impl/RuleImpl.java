/**
 * generated by Xtext 2.22.0
 */
package tdt4250.xss.xSS.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import tdt4250.xss.xSS.GroupProperty;
import tdt4250.xss.xSS.GroupSelector;
import tdt4250.xss.xSS.Rule;
import tdt4250.xss.xSS.Selector;
import tdt4250.xss.xSS.XSSPackage;
import tdt4250.xss.xSS.XStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tdt4250.xss.xSS.impl.RuleImpl#getSelectors <em>Selectors</em>}</li>
 *   <li>{@link tdt4250.xss.xSS.impl.RuleImpl#getGroupSelectors <em>Group Selectors</em>}</li>
 *   <li>{@link tdt4250.xss.xSS.impl.RuleImpl#getXStatements <em>XStatements</em>}</li>
 *   <li>{@link tdt4250.xss.xSS.impl.RuleImpl#getGroupStatements <em>Group Statements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RuleImpl extends MinimalEObjectImpl.Container implements Rule
{
  /**
   * The cached value of the '{@link #getSelectors() <em>Selectors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectors()
   * @generated
   * @ordered
   */
  protected EList<Selector> selectors;

  /**
   * The cached value of the '{@link #getGroupSelectors() <em>Group Selectors</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupSelectors()
   * @generated
   * @ordered
   */
  protected EList<GroupSelector> groupSelectors;

  /**
   * The cached value of the '{@link #getXStatements() <em>XStatements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXStatements()
   * @generated
   * @ordered
   */
  protected EList<XStatement> xStatements;

  /**
   * The cached value of the '{@link #getGroupStatements() <em>Group Statements</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupStatements()
   * @generated
   * @ordered
   */
  protected EList<GroupProperty> groupStatements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSSPackage.Literals.RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Selector> getSelectors()
  {
    if (selectors == null)
    {
      selectors = new EObjectContainmentEList<Selector>(Selector.class, this, XSSPackage.RULE__SELECTORS);
    }
    return selectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GroupSelector> getGroupSelectors()
  {
    if (groupSelectors == null)
    {
      groupSelectors = new EObjectResolvingEList<GroupSelector>(GroupSelector.class, this, XSSPackage.RULE__GROUP_SELECTORS);
    }
    return groupSelectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XStatement> getXStatements()
  {
    if (xStatements == null)
    {
      xStatements = new EObjectContainmentEList<XStatement>(XStatement.class, this, XSSPackage.RULE__XSTATEMENTS);
    }
    return xStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GroupProperty> getGroupStatements()
  {
    if (groupStatements == null)
    {
      groupStatements = new EObjectResolvingEList<GroupProperty>(GroupProperty.class, this, XSSPackage.RULE__GROUP_STATEMENTS);
    }
    return groupStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XSSPackage.RULE__SELECTORS:
        return ((InternalEList<?>)getSelectors()).basicRemove(otherEnd, msgs);
      case XSSPackage.RULE__XSTATEMENTS:
        return ((InternalEList<?>)getXStatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSSPackage.RULE__SELECTORS:
        return getSelectors();
      case XSSPackage.RULE__GROUP_SELECTORS:
        return getGroupSelectors();
      case XSSPackage.RULE__XSTATEMENTS:
        return getXStatements();
      case XSSPackage.RULE__GROUP_STATEMENTS:
        return getGroupStatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSSPackage.RULE__SELECTORS:
        getSelectors().clear();
        getSelectors().addAll((Collection<? extends Selector>)newValue);
        return;
      case XSSPackage.RULE__GROUP_SELECTORS:
        getGroupSelectors().clear();
        getGroupSelectors().addAll((Collection<? extends GroupSelector>)newValue);
        return;
      case XSSPackage.RULE__XSTATEMENTS:
        getXStatements().clear();
        getXStatements().addAll((Collection<? extends XStatement>)newValue);
        return;
      case XSSPackage.RULE__GROUP_STATEMENTS:
        getGroupStatements().clear();
        getGroupStatements().addAll((Collection<? extends GroupProperty>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSSPackage.RULE__SELECTORS:
        getSelectors().clear();
        return;
      case XSSPackage.RULE__GROUP_SELECTORS:
        getGroupSelectors().clear();
        return;
      case XSSPackage.RULE__XSTATEMENTS:
        getXStatements().clear();
        return;
      case XSSPackage.RULE__GROUP_STATEMENTS:
        getGroupStatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSSPackage.RULE__SELECTORS:
        return selectors != null && !selectors.isEmpty();
      case XSSPackage.RULE__GROUP_SELECTORS:
        return groupSelectors != null && !groupSelectors.isEmpty();
      case XSSPackage.RULE__XSTATEMENTS:
        return xStatements != null && !xStatements.isEmpty();
      case XSSPackage.RULE__GROUP_STATEMENTS:
        return groupStatements != null && !groupStatements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //RuleImpl
