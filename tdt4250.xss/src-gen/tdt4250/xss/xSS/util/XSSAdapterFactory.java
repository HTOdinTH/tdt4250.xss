/**
 * generated by Xtext 2.22.0
 */
package tdt4250.xss.xSS.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import tdt4250.xss.xSS.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see tdt4250.xss.xSS.XSSPackage
 * @generated
 */
public class XSSAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XSSPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XSSAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = XSSPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XSSSwitch<Adapter> modelSwitch =
    new XSSSwitch<Adapter>()
    {
      @Override
      public Adapter casestylesheet(stylesheet object)
      {
        return createstylesheetAdapter();
      }
      @Override
      public Adapter caseXSelector(XSelector object)
      {
        return createXSelectorAdapter();
      }
      @Override
      public Adapter caseGroupSelector(GroupSelector object)
      {
        return createGroupSelectorAdapter();
      }
      @Override
      public Adapter caseSelector(Selector object)
      {
        return createSelectorAdapter();
      }
      @Override
      public Adapter caseXProperty(XProperty object)
      {
        return createXPropertyAdapter();
      }
      @Override
      public Adapter caseCustomProperty(CustomProperty object)
      {
        return createCustomPropertyAdapter();
      }
      @Override
      public Adapter caseSubRule(SubRule object)
      {
        return createSubRuleAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseGroupProperty(GroupProperty object)
      {
        return createGroupPropertyAdapter();
      }
      @Override
      public Adapter caseXStatement(XStatement object)
      {
        return createXStatementAdapter();
      }
      @Override
      public Adapter caseXSingleStatement(XSingleStatement object)
      {
        return createXSingleStatementAdapter();
      }
      @Override
      public Adapter caseSingleRefStatement(SingleRefStatement object)
      {
        return createSingleRefStatementAdapter();
      }
      @Override
      public Adapter caseSingleStatement(SingleStatement object)
      {
        return createSingleStatementAdapter();
      }
      @Override
      public Adapter caseXMultiStatement(XMultiStatement object)
      {
        return createXMultiStatementAdapter();
      }
      @Override
      public Adapter caseMultiRefStatement(MultiRefStatement object)
      {
        return createMultiRefStatementAdapter();
      }
      @Override
      public Adapter caseMultiStatement(MultiStatement object)
      {
        return createMultiStatementAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseRule(Rule object)
      {
        return createRuleAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.stylesheet <em>stylesheet</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.stylesheet
   * @generated
   */
  public Adapter createstylesheetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.XSelector <em>XSelector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.XSelector
   * @generated
   */
  public Adapter createXSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.GroupSelector <em>Group Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.GroupSelector
   * @generated
   */
  public Adapter createGroupSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.Selector <em>Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.Selector
   * @generated
   */
  public Adapter createSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.XProperty <em>XProperty</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.XProperty
   * @generated
   */
  public Adapter createXPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.CustomProperty <em>Custom Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.CustomProperty
   * @generated
   */
  public Adapter createCustomPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.SubRule <em>Sub Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.SubRule
   * @generated
   */
  public Adapter createSubRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.GroupProperty <em>Group Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.GroupProperty
   * @generated
   */
  public Adapter createGroupPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.XStatement <em>XStatement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.XStatement
   * @generated
   */
  public Adapter createXStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.XSingleStatement <em>XSingle Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.XSingleStatement
   * @generated
   */
  public Adapter createXSingleStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.SingleRefStatement <em>Single Ref Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.SingleRefStatement
   * @generated
   */
  public Adapter createSingleRefStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.SingleStatement <em>Single Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.SingleStatement
   * @generated
   */
  public Adapter createSingleStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.XMultiStatement <em>XMulti Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.XMultiStatement
   * @generated
   */
  public Adapter createXMultiStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.MultiRefStatement <em>Multi Ref Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.MultiRefStatement
   * @generated
   */
  public Adapter createMultiRefStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.MultiStatement <em>Multi Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.MultiStatement
   * @generated
   */
  public Adapter createMultiStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tdt4250.xss.xSS.Rule <em>Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tdt4250.xss.xSS.Rule
   * @generated
   */
  public Adapter createRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //XSSAdapterFactory
