/*
 * generated by Xtext 2.22.0
 */
package tdt4250.xss.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XSSGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StylesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.xss.XSS.Stylesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXSelectorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCustomSelectorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCustomSelectorsGroupSelectorParserRuleCall_1_0 = (RuleCall)cCustomSelectorsAssignment_1.eContents().get(0);
		
		//// this is the model
		//Stylesheet stylesheet:
		//	'XSelectors:'
		//	customSelectors+=GroupSelector+ // ill make them ordered, then
		//	/*
		//	'XProperties:'
		//		(customProperties += XProperty)+ // ll make them mandatory, then
		//	'Rules:'
		//		(rules += Rule)+
		//	*/;
		@Override public ParserRule getRule() { return rule; }
		
		//'XSelectors:' customSelectors+=GroupSelector+
		public Group getGroup() { return cGroup; }
		
		//'XSelectors:'
		public Keyword getXSelectorsKeyword_0() { return cXSelectorsKeyword_0; }
		
		//customSelectors+=GroupSelector+
		public Assignment getCustomSelectorsAssignment_1() { return cCustomSelectorsAssignment_1; }
		
		//GroupSelector
		public RuleCall getCustomSelectorsGroupSelectorParserRuleCall_1_0() { return cCustomSelectorsGroupSelectorParserRuleCall_1_0; }
	}
	public class GroupSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.xss.XSS.GroupSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubSelectorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubSelectorsSelectorParserRuleCall_3_0 = (RuleCall)cSubSelectorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSubSelectorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSubSelectorsSelectorParserRuleCall_4_1_0 = (RuleCall)cSubSelectorsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		//terminal fragment WORD: ('a'..'z'|'A'..'Z'|'-')+;
		//terminal fragment PREFIX: '::'|':'|'.'|'#';
		//terminal fragment COMBINER: ' '|'>'|'+'|'~';
		//terminal LB: '\r'?'\n';
		//terminal NAME: WORD;
		//terminal SEL: PREFIX? WORD ((COMBINER | PREFIX | (COMBINER PREFIX)) WORD)*;
		//terminal VAL: ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'%'|'{'|'}')+;
		//*/ /*
		//STRING_OR_NAME:
		//	(STRING | NAME)
		//;
		//*/ /*	
		//XSelector:
		//	GroupSelector
		//;*/ GroupSelector:
		//	'sel'
		//	name=NAME
		//	'('
		//	subSelectors+=Selector (',' subSelectors+=Selector)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'sel' name=NAME '(' subSelectors+=Selector (',' subSelectors+=Selector)* ')'
		public Group getGroup() { return cGroup; }
		
		//'sel'
		public Keyword getSelKeyword_0() { return cSelKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//subSelectors+=Selector
		public Assignment getSubSelectorsAssignment_3() { return cSubSelectorsAssignment_3; }
		
		//Selector
		public RuleCall getSubSelectorsSelectorParserRuleCall_3_0() { return cSubSelectorsSelectorParserRuleCall_3_0; }
		
		//(',' subSelectors+=Selector)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//subSelectors+=Selector
		public Assignment getSubSelectorsAssignment_4_1() { return cSubSelectorsAssignment_4_1; }
		
		//Selector
		public RuleCall getSubSelectorsSelectorParserRuleCall_4_1_0() { return cSubSelectorsSelectorParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.xss.XSS.Selector");
		private final Assignment cNamesAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNamesAlternatives_0 = (Alternatives)cNamesAssignment.eContents().get(0);
		private final RuleCall cNamesSELTerminalRuleCall_0_0 = (RuleCall)cNamesAlternatives_0.eContents().get(0);
		private final RuleCall cNamesSTRINGTerminalRuleCall_0_1 = (RuleCall)cNamesAlternatives_0.eContents().get(1);
		
		//Selector:
		//	names+=(SEL | STRING)+;
		@Override public ParserRule getRule() { return rule; }
		
		//names+=(SEL | STRING)+
		public Assignment getNamesAssignment() { return cNamesAssignment; }
		
		//(SEL | STRING)
		public Alternatives getNamesAlternatives_0() { return cNamesAlternatives_0; }
		
		//SEL
		public RuleCall getNamesSELTerminalRuleCall_0_0() { return cNamesSELTerminalRuleCall_0_0; }
		
		//STRING
		public RuleCall getNamesSTRINGTerminalRuleCall_0_1() { return cNamesSTRINGTerminalRuleCall_0_1; }
	}
	
	
	private final StylesheetElements pStylesheet;
	private final TerminalRule tNAME;
	private final TerminalRule tSEL;
	private final GroupSelectorElements pGroupSelector;
	private final SelectorElements pSelector;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XSSGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStylesheet = new StylesheetElements();
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.xss.XSS.NAME");
		this.tSEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.xss.XSS.SEL");
		this.pGroupSelector = new GroupSelectorElements();
		this.pSelector = new SelectorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tdt4250.xss.XSS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// this is the model
	//Stylesheet stylesheet:
	//	'XSelectors:'
	//	customSelectors+=GroupSelector+ // ill make them ordered, then
	//	/*
	//	'XProperties:'
	//		(customProperties += XProperty)+ // ll make them mandatory, then
	//	'Rules:'
	//		(rules += Rule)+
	//	*/;
	public StylesheetElements getStylesheetAccess() {
		return pStylesheet;
	}
	
	public ParserRule getStylesheetRule() {
		return getStylesheetAccess().getRule();
	}
	
	//terminal NAME:
	//	ID | '-'+;
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//terminal SEL:
	//	('::' | ':' | '.' | '#')? NAME ((('>' | '+' | '~') | ('::' | ':' | '.' | '#') | ('>' | '+' | '~') ('::' | ':' | '.' |
	//	'#')) NAME)*;
	public TerminalRule getSELRule() {
		return tSEL;
	}
	
	///*
	//terminal fragment WORD: ('a'..'z'|'A'..'Z'|'-')+;
	//terminal fragment PREFIX: '::'|':'|'.'|'#';
	//terminal fragment COMBINER: ' '|'>'|'+'|'~';
	//terminal LB: '\r'?'\n';
	//terminal NAME: WORD;
	//terminal SEL: PREFIX? WORD ((COMBINER | PREFIX | (COMBINER PREFIX)) WORD)*;
	//terminal VAL: ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'%'|'{'|'}')+;
	//*/ /*
	//STRING_OR_NAME:
	//	(STRING | NAME)
	//;
	//*/ /*	
	//XSelector:
	//	GroupSelector
	//;*/ GroupSelector:
	//	'sel'
	//	name=NAME
	//	'('
	//	subSelectors+=Selector (',' subSelectors+=Selector)*
	//	')';
	public GroupSelectorElements getGroupSelectorAccess() {
		return pGroupSelector;
	}
	
	public ParserRule getGroupSelectorRule() {
		return getGroupSelectorAccess().getRule();
	}
	
	//Selector:
	//	names+=(SEL | STRING)+;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
