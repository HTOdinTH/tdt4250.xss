/*
 * generated by Xtext 2.22.0
 */
grammar InternalXSS;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package tdt4250.xss.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package tdt4250.xss.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import tdt4250.xss.services.XSSGrammarAccess;

}

@parser::members {

 	private XSSGrammarAccess grammarAccess;

    public InternalXSSParser(TokenStream input, XSSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Stylesheet";
   	}

   	@Override
   	protected XSSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleStylesheet
entryRuleStylesheet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStylesheetRule()); }
	iv_ruleStylesheet=ruleStylesheet
	{ $current=$iv_ruleStylesheet.current; }
	EOF;

// Rule Stylesheet
ruleStylesheet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='XSelectors:'
		{
			newLeafNode(otherlv_0, grammarAccess.getStylesheetAccess().getXSelectorsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStylesheetAccess().getCustomSelectorsGroupSelectorParserRuleCall_1_0());
				}
				lv_customSelectors_1_0=ruleGroupSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStylesheetRule());
					}
					add(
						$current,
						"customSelectors",
						lv_customSelectors_1_0,
						"tdt4250.xss.XSS.GroupSelector");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleGroupSelector
entryRuleGroupSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroupSelectorRule()); }
	iv_ruleGroupSelector=ruleGroupSelector
	{ $current=$iv_ruleGroupSelector.current; }
	EOF;

// Rule GroupSelector
ruleGroupSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sel'
		{
			newLeafNode(otherlv_0, grammarAccess.getGroupSelectorAccess().getSelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGroupSelectorAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGroupSelectorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"tdt4250.xss.XSS.NAME");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getGroupSelectorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroupSelectorAccess().getSubSelectorsSelectorParserRuleCall_3_0());
				}
				lv_subSelectors_3_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroupSelectorRule());
					}
					add(
						$current,
						"subSelectors",
						lv_subSelectors_3_0,
						"tdt4250.xss.XSS.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getGroupSelectorAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGroupSelectorAccess().getSubSelectorsSelectorParserRuleCall_4_1_0());
					}
					lv_subSelectors_5_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGroupSelectorRule());
						}
						add(
							$current,
							"subSelectors",
							lv_subSelectors_5_0,
							"tdt4250.xss.XSS.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getGroupSelectorAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_1=RULE_SEL
				{
					newLeafNode(lv_names_0_1, grammarAccess.getSelectorAccess().getNamesSELTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectorRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_1,
						"tdt4250.xss.XSS.SEL");
				}
				    |
				lv_names_0_2=RULE_STRING
				{
					newLeafNode(lv_names_0_2, grammarAccess.getSelectorAccess().getNamesSTRINGTerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectorRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_2,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)+
;

RULE_NAME : (RULE_ID|'-')+;

RULE_SEL : ('::'|':'|'.'|'#')? RULE_NAME ((('>'|'+'|'~')|('::'|':'|'.'|'#')|('>'|'+'|'~') ('::'|':'|'.'|'#')) RULE_NAME)*;

fragment RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
