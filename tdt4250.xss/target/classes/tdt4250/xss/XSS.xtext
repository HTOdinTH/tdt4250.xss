grammar tdt4250.xss.XSS with org.eclipse.xtext.common.Terminals

generate xSS "tdt4250.xss.model" // this is the model

Stylesheet returns stylesheet:
	('XSelectors:' 
		(customSelectors += XSelector)+) // ill make them ordered, then
	('XProperties:'
		(customProperties += XProperty)+)? // ll make them mandatory, then
	/*
	'Rules:'
		(rules += Rule)+
	*/
;

terminal NAME: (ID | '-')+;
//PREFIX: ('::'|':'|'.'|'#');
//COMBINER: ('>'|'+'|'~');
terminal SEL: ('::'|':'|'.'|'#')? NAME ((('>'|'+'|'~') | ('::'|':'|'.'|'#') | (('>'|'+'|'~') ('::'|':'|'.'|'#'))) NAME)*;
terminal VAL: ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'%'|'{'|'}')+;
//terminal VAL: '=' -> ';';

/*
terminal fragment WORD: ('a'..'z'|'A'..'Z'|'-')+;
terminal fragment PREFIX: '::'|':'|'.'|'#';
terminal fragment COMBINER: ' '|'>'|'+'|'~';
terminal LB: '\r'?'\n';
terminal NAME: WORD;
terminal SEL: PREFIX? WORD ((COMBINER | PREFIX | (COMBINER PREFIX)) WORD)*;
terminal VAL: ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'%'|'{'|'}')+;
*/


STRING_OR_NAME:
	(STRING | NAME)
;

STRING_OR_SEL:
	(STRING | SEL | NAME)
;

STRING_OR_VAL:
	(STRING | VAL | NAME)
;


XSelector:
	GroupSelector
;

GroupSelector:
	name = NAME
	'('
		(subSelectors += Selector)
		(',' subSelectors += Selector)*
	')'
;

Selector:
	name = STRING_OR_SEL
;

XProperty:
	(('$' CustomProperty) | GroupProperty)
;

CustomProperty:
	name = NAME
	'('
		(subRule += SubRule ';')+
	')'
;

SubRule:
	property = PROPERTY
	'='
	expression = Expression
;

Expression:
	name = STRING_OR_VAL
;

GroupProperty:
	name = NAME
	'('
		(statements += XStatement ';')+
	')'
;

XStatement:
	XSingleStatement// | XMultiStatement
;

XSingleStatement:
	('$' SingleRefStatement) | SingleStatement 
;

SingleRefStatement:
	property = [CustomProperty | NAME]
	'='
	value = VALUE
;

SingleStatement:
	property = PROPERTY
	'='
	value = VALUE
;

XMultiStatement:
	('$' MultiRefStatement) | MultiStatement
;

MultiRefStatement:
	property = [CustomProperty | NAME]
	'('
		(states += State ';')+
	')'
;

MultiStatement:
	property = PROPERTY
	'('
		(states += State ';')+
	')'
;

State:
	modifier = Selector // TODO: might need separate class
	'='
	value = VALUE
;

PROPERTY:
	NAME
;

VALUE:
	STRING_OR_VAL
;

/*
Rule:
	(selectors += Selector) | (groupSelectors += [GroupSelector]) // at least one of either
	(',' (selectors += Selector)? & (groupSelectors += [GroupSelector])?)* // then, any number of either, separated by comma
	':'
	(((xStatements += XStatement) | (groupStatements += [GroupProperty])) ';')+ // either kind of statement, then semicolon, at least one time
;
*/